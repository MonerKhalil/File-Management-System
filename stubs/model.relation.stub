<?php

namespace App\Models;

use App\Http\Repositories\Eloquent\{{model_relation}}Repository;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Http\Requests\BaseRequest;
use Illuminate\Validation\Rule;
use App\HelperClasses\MyApp;

class {{ model }} extends BaseModel
{
    use HasFactory;


    protected $fillable = [
        "{{relation_id}}",
        "is_active","created_by","updated_by","notes",
    ];

    // Add relationships between tables section

    public function {{relation_id_table}}(){
        return $this->belongsTo({{model_relation}}::class,"{{relation_id}}","id");
    }

    /**
     * @description add validation in frontend
     * @return mixed
     */
    public function viewFieldsValidationFrontEnd(): mixed{
        return [
            //
            '{{relation_id}}' => [
                'relation' => [
                    'model' => {{model_relation}}Repository::class,
                    'relationFunc' => '{{relation_id_table}}',
                    'key' => '',
                    'value' => '',
                    'validation' => 'required',
                ]
            ],
            'is_active' => ['select' => [0,1]],
            'notes' => 'editor|max:10000',
            'config' => [
               'table' => (new self())->getTable(),
               'ignoreFromShow' => [
                   //
              ],
              'ignoreFromEdit' => [
                  'is_active'
              ],
              'ignoreFromCreate' => [
                  'notes','is_active'
              ],
          ]
       ];
    }

    /**
     * @description add validation in backend
     * @return mixed
     */
    public function validationBackEnd(): mixed{
        $user = MyApp::Classes()->getUser();
        return function (BaseRequest $validator) use ($user) {
            return [
                //validation rule any image $validator->imageRule(false)
                //validation rule any word_name(only char and number) $validator->textRule(false)
                '{{relation_id}}' => ["required", Rule::exists("{{table_name_relation}}", "id")],
                'notes' => "nullable|string",
            ];
        };
    }

    /**
     * @inheritDoc
     */
    public function getRoutes(): mixed
    {
        return $this->resolveRoutes('{{ model | lowercase }}');
    }

    public function customAttributes():array{
        return [
        ];
    }

    public function attributesFullProcess(): array{
        return [
            self::API_KEYS => [],
        ];
    }
}
