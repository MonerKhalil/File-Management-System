<?php

namespace App\Models;

use App\HelperClasses\MyApp;
use App\Http\Requests\BaseRequest;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Validation\Rule;
use Laratrust\Models\LaratrustRole;
use OwenIt\Auditing\Contracts\Auditable;

class Role extends LaratrustRole implements Auditable
{
    use SoftDeletes;
    use \OwenIt\Auditing\Auditable;

    public $guarded = [];

    const SUPER_ADMIN = "super_admin";
    const USER = "user";

    /**
     * @author moner khalil
     */
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::created(function ($model){
            $user = MyApp::Classes()->getUser();
            if (!is_null($user)) {
                $model->created_by = $user->id;
            }
        });
        self::updated(function ($model) {
            $user = MyApp::Classes()->getUser();
            if (!is_null($user)) {
                $model->updated_by = $user->id;
            }
        });
    }

    public function userCreatedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, "created_by", "id");
    }

    public function userUpdatedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, "updated_by", "id");
    }

    /**
     * @description add validation in frontend
     * @return mixed
     */
    public function viewFieldsValidationFrontEnd(): mixed{
        return [
            //
            'name' => 'text|required',
            'display_name' => 'text|required',
            'description' => 'editor|required',
            'is_active' => ['select' => [0,1]],
            'config' => [
                'table' => (new self())->getTable(),
                'ignoreFromShow' => [
                ],
                'ignoreFromEdit' => [
                    'is_active'
                ],
                'ignoreFromCreate' => [
                ],
            ]
        ];
    }

    /**
     * @description add validation in backend
     * @return mixed
     */
    public function validationBackEnd(): mixed{
        return function (BaseRequest $validator) {
            $rules = [
                //validation rule any image $validator->imageRule(false)
                //validation rule any word_name(only char and number) $validator->textRule(false)
                'display_name' => 'required|string|min:3|max:255',
                'description' => 'required|string|min:3|max:255',
                'permissions' => 'required|array',
                'permissions.*' => 'required|exists:permissions,id',
            ];
            $rules['name'] = $validator->isUpdatedRequest() ?
                'required|unique:roles,name,'. $validator->role->id : 'required|unique:roles,name';
            return $rules;
        };
    }

    /**
     * @inheritDoc
     */
    public function getRoutes(): mixed
    {
        $defaultConfig = MyApp::Classes()->routesALLCrud();

        $result = [];

        foreach ($defaultConfig as $key => $functions) {
            $result[$key] = "role.$key";
        }

        return $result;
    }
}
